---
swagger: "2.0"
info:
  description: "Contains all available API endpoints in this codebase"
  version: "1.0.0"
  title: "Authentication and CRUD stuff"
  contact:
    email: "valentinlemaire1618@gmail.com"
host: "localhost:3000"
basePath: "/api"
tags:
- name: "stuff"
  description: "All kinf od stuff"
- name: "user"
  description: "Operations about user"
schemes:
- "http"
paths:
  /stuff:
    get:
      tags:
      - "stuff"
      summary: "Get all the stuff"
      description: ""
      produces:
      - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Authorization"
          description: "Attach Bearer JWT token"
          required: true
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
                $ref: "#/definitions/Stuff"
        400:
          description: "client error"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
        - Bearer: []
    post:
      tags:
      - "stuff"
      summary: "Create a stuff"
      description: ""
      produces:
      - "application/json"
      parameters:
        - in: "header"
          type: "string"
          name: "Authorization"
          description: "Attach Bearer JWT token"
          required: true
        - in: "body"
          name: "body"
          description: "The stuff to save into the ddb"
          required: true
          schema:
            $ref: "#/definitions/Stuff"
      responses:
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "client error"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
        - Bearer: []
  /stuff/${id}:
    get:
      tags:
      - "stuff"
      summary: "Get a specific stuff"
      description: ""
      produces:
      - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of stuff to return"
          required: true
          type: "string"
        - in: "header"
          type: "string"
          name: "Authorization"
          description: "Attach Bearer JWT token"
          required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Stuff"
        400:
          description: "client error"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - Bearer: []
    put:
      tags:
      - "stuff"
      summary: "Modify a specific stuff"
      description: ""
      produces:
      - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of stuff to modify"
          required: true
          type: "string"
        - in: "header"
          type: "string"
          name: "Authorization"
          description: "Attach Bearer JWT token"
          required: true
        - in: "body"
          name: "body"
          description: "The stuff to modify"
          required: true
          schema:
            $ref: "#/definitions/Stuff"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "client error"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - Bearer: []
    delete:
      tags:
      - "stuff"
      summary: "Delete a specific stuff"
      description: ""
      produces:
      - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of stuff to delete"
          required: true
          type: "string"
        - in: "header"
          type: "string"
          name: "Authorization"
          description: "Attach Bearer JWT token"
          required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "client error"
          schema:
            $ref: "#/definitions/ApiResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - Bearer: []
  /signup:
    post:
      tags:
      - "user"
      summary: "Create a user"
      description: ""
      produces:
      - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "The user to create"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "client error"
          schema:
            $ref: "#/definitions/ApiResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ApiResponse"
  /login:
    post:
      tags:
      - "user"
      summary: "Login"
      description: ""
      produces:
      - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "The user to log"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/LoginResponse"
        400:
          description: "client error"
          schema:
            $ref: "#/definitions/ApiResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ApiResponse"
securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  ApiResponse:
    type: "object"
    properties:
      status:
        type: "integer"
        format: "int32"
      message:
        type: "object"
  LoginResponse:
    type: "object"
    properties:
      userId:
        type: "string"
      token:
        type: "string"
  Stuff:
    type: "object"
    required:
    - "title"
    - "description"
    - "imageUrl"
    - "userId"
    - "price"
    properties:
      title:
        type: "string"
      description:
        type: "string"
      imageUrl:
        type: "string"
      userId:
        type: "string"
      price:
        type: "number"
  User:
    type: "object"
    required:
    - "email"
    - "password"
    properties:
      email:
        type: "string"
      password:
        type: "string"